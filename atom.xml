<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marvin&#39;s</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-14T17:21:31.074Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Puwen Ma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础-集合</title>
    <link href="http://yoursite.com/2019/06/12/Java%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2019/06/12/Java基础-集合/</id>
    <published>2019-06-11T21:13:03.000Z</published>
    <updated>2019-06-14T17:21:31.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Java集合简介"><a href="#一、Java集合简介" class="headerlink" title="一、Java集合简介"></a>一、Java集合简介</h2><ul><li><p>Set：无序、不可重复</p></li><li><p>List：有序、重复的</p></li><li><p>Map：具有映射关系</p></li><li><p>Queue：队列集合实现</p></li></ul><h3 id="1-集合与数组的区别"><a href="#1-集合与数组的区别" class="headerlink" title="1. 集合与数组的区别"></a>1. 集合与数组的区别</h3><ul><li><p>数组长度在初始化时指定，意味着只能保存定长的数据。而集合可以保存数量不确定的数据。同时可以保存具有映射关系的数据（即关联数组，键值对 key-value）。</p></li><li><p>数组元素即可以是基本类型的值，也可以是对象。集合里只能保存对象（实际上只是保存对象的引用变量），基本数据类型的变量要转换成对应的包装类才能放入集合类中。</p></li></ul><h3 id="2-Java集合类之间的继承关系"><a href="#2-Java集合类之间的继承关系" class="headerlink" title="2. Java集合类之间的继承关系"></a>2. Java集合类之间的继承关系</h3><ul><li><p>Java的集合类主要由两个接口派生而出:</p><ul><li><p>Collection</p><p><img src="/img/20190612-0/3985563-e7febf364d8d8235-1.png" alt="Collection Img"></p></li><li><p>Map (key-value具有映射关系的集合)</p><p><img src="/img/20190612-0/3985563-06052107849a7603-2.png" alt="Map Img"></p></li></ul></li></ul><h2 id="二、Collection接口"><a href="#二、Collection接口" class="headerlink" title="二、Collection接口"></a>二、Collection接口</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><pre><code>Collection接口是Set,Queue,List的父接口。</code></pre><h4 id="1-1-接口中定义的方法"><a href="#1-1-接口中定义的方法" class="headerlink" title="1.1. 接口中定义的方法"></a>1.1. 接口中定义的方法</h4><p><img src="/img/20190612-0/3985563-414332ffe4733274-3.png" alt="Collection Function Img"></p><p><strong><em>注：重点看iterator()方法</em></strong></p><h4 id="1-2-使用Iterator遍历集合元素"><a href="#1-2-使用Iterator遍历集合元素" class="headerlink" title="1.2. 使用Iterator遍历集合元素"></a>1.2. 使用Iterator遍历集合元素</h4><pre><code>Iterator接口经常被称作迭代器，它是Collection接口的父接口。但Iterator主要用于遍历集合中的元素。 Iterator接口中主要定义了2个方法：</code></pre><p><img src="/img/20190612-0/3985563-63737a2d81713a47-4.png" alt="Iterator Img"></p><p>使用迭代器遍历集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建集合</span></span><br><span class="line">    Collection&lt;Integer&gt; collection = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</span><br><span class="line">        collection.add(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得集合的迭代器</span></span><br><span class="line">    Iterator iterator = collection.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123; <span class="comment">//判断是否存在下一个元素</span></span><br><span class="line">        <span class="comment">//取出元素并打印</span></span><br><span class="line">        System.out.println(iterator.next() + <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong>当使用Iterator对集合元素进行迭代时，把集合元素的值传给了迭代变量，<strong>基本数据类型</strong>传递的是<strong>值</strong>。<strong>引用类型</strong>传递的仅仅是对象的<strong>引用变量</strong>。</p><h3 id="2-Set集合"><a href="#2-Set集合" class="headerlink" title="2. Set集合"></a>2. Set集合</h3><pre><code>Set集合与Collection集合基本相同，没有提供任何额外的方法。实际上Set就是Collection，只是行为略有不同（Set不允许包含重复元素）。Set集合不允许包含相同的元素，如果试图把两个相同的元素加入同一个Set集合中，则添加操作失败，add()方法返回false，且新元素不会被加入。</code></pre><h3 id="3-List集合"><a href="#3-List集合" class="headerlink" title="3. List集合"></a>3. List集合</h3><h4 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1. 简介"></a>3.1. 简介</h4><pre><code>List集合代表一个元素有序、可重复的集合，集合中每个元素都有其对应的顺序索引。List集合允许使用重复元素，可以通过索引来访问指定位置的集合元素 。List作为Collection接口的子接口，可以使用Collection接口里的全部方法。而且由于List是有序集合，因此List集合里增加了一些根据索引来操作集合元素的方法。</code></pre><h4 id="3-2-接口中定义的方法"><a href="#3-2-接口中定义的方法" class="headerlink" title="3.2. 接口中定义的方法"></a>3.2. 接口中定义的方法</h4><ul><li><p><strong>void add(int index, Object element):</strong> 在列表的指定位置插入指定元素（可选操作）。</p></li><li><p><strong>boolean addAll(int index, Collection&lt;? extends E&gt; c) :</strong> 将集合c 中的所有元素都插入到列表中的指定位置index处。</p></li><li><p><strong>Object get(index):</strong>  返回列表中指定位置的元素。</p></li><li><p><strong>int indexOf(Object o):</strong> 返回此列表中第一次出现的指定元素的索引；如果此列表不包含该元素，则返回 -1。</p></li><li><p><strong>int lastIndexOf(Object o):</strong> 返回此列表中最后出现的指定元素的索引；如果列表不包含此元素，则返回 -1。</p></li><li><p><strong>Object remove(int index):</strong> 移除列表中指定位置的元素。</p></li><li><p><strong>Object set(int index, Object element):</strong> 用指定元素替换列表中指定位置的元素。</p></li><li><p><strong>List subList(int fromIndex, int toIndex):</strong> 返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的所有集合元素组成的子集。</p></li><li><p><strong>Object[] toArray():</strong> 返回按适当顺序包含列表中的所有元素的数组（从第一个元素到最后一个元素）。</p></li><li><p><strong>void replaceAll(UnaryOperator operator):</strong> 根据operator指定的计算规则重新设置List集合的所有元素。</p></li><li><p><strong>void sort(Comparator c):</strong> 根据Comparator参数对List集合的元素排序。</p><p><strong>注：</strong>replaceAll和sort为Java8 新增方法：</p></li></ul><h3 id="4-Queue集合"><a href="#4-Queue集合" class="headerlink" title="4. Queue集合"></a>4. Queue集合</h3><h4 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1. 简介"></a>4.1. 简介</h4><pre><code>Queue用户模拟队列这种数据结构，队列通常是指“先进先出”(FIFO，first-in-first-out)的容器。队列的头部是在队列中存放时间最长的元素，队列的尾部是保存在队列中存放时间最短的元素。新元素插入（offer）到队列的尾部，访问元素（poll）操作会返回队列头部的元素。通常，队列不允许随机访问队列中的元素。</code></pre><h4 id="4-2-接口中定义的方法"><a href="#4-2-接口中定义的方法" class="headerlink" title="4.2. 接口中定义的方法"></a>4.2. 接口中定义的方法</h4><p><img src="/img/20190612-0/3985563-0505554930ca982e-5.png" alt="Queue Function Img"></p><h2 id="三、Map集合"><a href="#三、Map集合" class="headerlink" title="三、Map集合"></a>三、Map集合</h2><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1. 简介"></a>1. 简介</h3><pre><code>Map用户保存具有映射关系的数据，因此Map集合里保存着两组数，一组值用户保存Map里的key,另一组值用户保存Map里的value，key和value都可以是任何引用类型的数据。Map的key不允许重复，即同一个Map对象的任何两个key通过equals方法比较总是返回false。如下图所描述，key和value之间存在单向一对一关系，即通过指定的key,总能找到唯一的、确定的value。从Map中取出数据时，只要给出指定的key，就可以取出对应的value。</code></pre><p><img src="/img/20190612-0/3985563-51f6c5278df941fe-6.png" alt="Map Img"></p><h3 id="2-Map集合与Set集合、List集合的关系"><a href="#2-Map集合与Set集合、List集合的关系" class="headerlink" title="2. Map集合与Set集合、List集合的关系"></a>2. Map集合与Set集合、List集合的关系</h3><ul><li><p><strong>与Set集合的关系</strong></p><p>如果 把Map里的所有key放在一起看，它们就组成了一个Set集合（所有的key没有顺序，key与key之间不能重复），实际上Map确实包含了一个keySet()方法，用户返回Map里所有key组成的Set集合。</p></li><li><p><strong>与List集合的关系</strong></p><p>如果把Map里的所有value放在一起来看，它们又非常类似于一个List：元素与元素之间可以重复，每个元素可以根据索引来查找，只是Map中索引不再使用整数值，而是以另外一个对象作为索引。</p></li></ul><h3 id="3-接口中定义的方法"><a href="#3-接口中定义的方法" class="headerlink" title="3. 接口中定义的方法"></a>3. 接口中定义的方法</h3><p><img src="/img/20190612-0/3985563-d2494516e1d68a6d-7.png" alt="Map Function Img"></p><p>Map中还包括一个内部类Entry，该类封装了一个key-value对。Entry包含如下三个方法：</p><p><img src="/img/20190612-0/3985563-ecedd1880af9d40a-8.png" alt="Entry Function Img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Java集合简介&quot;&gt;&lt;a href=&quot;#一、Java集合简介&quot; class=&quot;headerlink&quot; title=&quot;一、Java集合简介&quot;&gt;&lt;/a&gt;一、Java集合简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Set：无序、不可重复&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="开发" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
