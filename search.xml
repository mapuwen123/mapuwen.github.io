<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java集合-LinkedList]]></title>
    <url>%2F2019%2F06%2F19%2FJava%E9%9B%86%E5%90%88-LinkedList%2F</url>
    <content type="text"><![CDATA[一、概述以双向链表实现。链表无容量限制，但双向链表本身使用了更多空间，也需要额外的链表指针操作。 按下标访问元素—get(i)/set(i,e) 要悲剧的遍历链表将指针移动到位(如果i&gt;数组大小的一半，会从末尾移起)。 插入、删除元素时修改前后节点的指针即可，但还是要遍历部分链表的指针才能移动到下标所指的位置，只有在链表两头的操作—add()，addFirst()，removeLast()或用iterator()上的remove()能省掉指针的移动。 LinkedList是一个简单的数据结构，与ArrayList不同的是，他是基于链表实现的。1234LinkedList&lt;String&gt; list = new LinkedList&lt;String&gt;();list.add("语文: 1");list.add("数学: 2");list.add("英语: 3"); 二、set和get函数1234567891011public E set(int index, E element) &#123; checkElementIndex(index); Node&lt;E&gt; x = node(index); E oldVal = x.item; x.item = element; return oldVal;&#125;public E get(int index) &#123; checkElementIndex(index); return node(index).item;&#125; 这两个函数都调用了node函数，该函数会以O(n/2)的性能去获取一个节点，具体实现如下所示： 1234567891011121314Node&lt;E&gt; node(int index) &#123; // assert isElementIndex(index); if (index &lt; (size &gt;&gt; 1)) &#123; Node&lt;E&gt; x = first; for (int i = 0; i &lt; index; i++) x = x.next; return x; &#125; else &#123; Node&lt;E&gt; x = last; for (int i = size - 1; i &gt; index; i--) x = x.prev; return x; &#125;&#125; 就是判断index是在前半区间还是后半区间，如果在前半区间就从head搜索，而在后半区间就从tail搜索。而不是一直从头到尾的搜索。如此设计，将节点访问的复杂度由O(n)变为O(n/2)。]]></content>
      <tags>
        <tag>java</tag>
        <tag>基础</tag>
        <tag>集合</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java集合-ArrayList]]></title>
    <url>%2F2019%2F06%2F16%2FJava%E9%9B%86%E5%90%88-ArrayList%2F</url>
    <content type="text"><![CDATA[一、概述以数组实现。节约空间，但数组有容量限制。超出限制时会增加50%容量，用System.arraycopy()复制到新的数组，因此最好能给出数组大小的预估值。默认第一次插入元素时创建大小为10的数组。 按数组下标访问元素—get(i)/set(i,e) 的性能很高，这是数组的基本优势。 直接在数组末尾加入元素—add(e)的性能也高，但如果按下标插入、删除元素—add(i,e), remove(i), remove(e)，则要用System.arraycopy()来移动部分受影响的元素，性能就变差了，这是基本劣势。 ArrayList是一个相对来说比较简单的数据结构，最重要的一点就是它的自动扩容，可以认为就是我们常说的“动态数组”。12345ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();list.add("语文: 99");list.add("数学: 98");list.add("英语: 100");list.remove(0); 在执行这四条语句时，是这么变化的： 二、add函数当我们在ArrayList中增加元素的时候，会使用add函数。他会将元素放到末尾。具体实现如下： 12345public boolean add(E e) &#123; ensureCapacityInternal(size + 1); // 数组自动扩容 elementData[size++] = e; return true;&#125; 他的实现其实最核心的内容就是ensureCapacityInternal。这个函数就是自动扩容机制的核心。他的具体实现： 123456789101112131415161718192021222324252627private void ensureCapacityInternal(int minCapacity) &#123; if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123; minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity); &#125; ensureExplicitCapacity(minCapacity);&#125;private void ensureExplicitCapacity(int minCapacity) &#123; modCount++; // overflow-conscious code if (minCapacity - elementData.length &gt; 0) grow(minCapacity);&#125;private void grow(int minCapacity) &#123; // overflow-conscious code int oldCapacity = elementData.length; // 扩展为原来的1.5倍 int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); // 如果扩为1.5倍还不满足需求，直接扩为需求值 if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity);&#125; 也就是说，当增加数据的时候，如果ArrayList的大小已经不满足需求时，那么就将数组变为原长度的1.5倍，之后的操作就是把老的数组拷到新的数组里面。例如，默认的数组大小是10，也就是说当我们add10个元素之后，再进行一次add时，就会发生自动扩容，数组长度由10变为了15具体情况如下所示： 三、set和get函数先做index检查，然后执行赋值或访问操作： 123456789101112public E set(int index, E element) &#123; //index检查，超出数组长度抛出IndexOutOfBoundsException异常 rangeCheck(index); E oldValue = elementData(index); elementData[index] = element; return oldValue;&#125;public E get(int index) &#123; rangeCheck(index); return elementData(index);&#125; 四、remove函数1234567891011121314public E remove(int index) &#123; //index检查，超出数组长度抛出IndexOutOfBoundsException异常 rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved &gt; 0) // 把后面的往前移 System.arraycopy(elementData, index+1, elementData, index, numMoved); // 把最后的置null elementData[--size] = null; // clear to let GC do its work return oldValue;&#125;]]></content>
      <tags>
        <tag>java</tag>
        <tag>基础</tag>
        <tag>集合</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础-集合]]></title>
    <url>%2F2019%2F06%2F12%2FJava%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[一、Java集合简介 Set：无序、不可重复 List：有序、重复的 Map：具有映射关系 Queue：队列集合实现 1. 集合与数组的区别 数组长度在初始化时指定，意味着只能保存定长的数据。而集合可以保存数量不确定的数据。同时可以保存具有映射关系的数据（即关联数组，键值对 key-value）。 数组元素即可以是基本类型的值，也可以是对象。集合里只能保存对象（实际上只是保存对象的引用变量），基本数据类型的变量要转换成对应的包装类才能放入集合类中。 2. Java集合类之间的继承关系 Java的集合类主要由两个接口派生而出: Collection Map (key-value具有映射关系的集合) 二、Collection接口1. 简介Collection接口是Set,Queue,List的父接口。1.1. 接口中定义的方法 注：重点看iterator()方法 1.2. 使用Iterator遍历集合元素Iterator接口经常被称作迭代器，它是Collection接口的父接口。但Iterator主要用于遍历集合中的元素。 Iterator接口中主要定义了2个方法： 使用迭代器遍历集合： 1234567891011121314public static void main(String[] args) &#123; //创建集合 Collection&lt;Integer&gt; collection = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; 10; i ++) &#123; collection.add(i); &#125; //获得集合的迭代器 Iterator iterator = collection.iterator(); while (iterator.hasNext()) &#123; //判断是否存在下一个元素 //取出元素并打印 System.out.println(iterator.next() + ""); &#125;&#125; 注：当使用Iterator对集合元素进行迭代时，把集合元素的值传给了迭代变量，基本数据类型传递的是值。引用类型传递的仅仅是对象的引用变量。 2. Set集合Set集合与Collection集合基本相同，没有提供任何额外的方法。实际上Set就是Collection，只是行为略有不同（Set不允许包含重复元素）。 Set集合不允许包含相同的元素，如果试图把两个相同的元素加入同一个Set集合中，则添加操作失败，add()方法返回false，且新元素不会被加入。3. List集合3.1. 简介List集合代表一个元素有序、可重复的集合，集合中每个元素都有其对应的顺序索引。List集合允许使用重复元素，可以通过索引来访问指定位置的集合元素 。 List作为Collection接口的子接口，可以使用Collection接口里的全部方法。而且由于List是有序集合，因此List集合里增加了一些根据索引来操作集合元素的方法。3.2. 接口中定义的方法 void add(int index, Object element): 在列表的指定位置插入指定元素（可选操作）。 boolean addAll(int index, Collection&lt;? extends E&gt; c) : 将集合c 中的所有元素都插入到列表中的指定位置index处。 Object get(index): 返回列表中指定位置的元素。 int indexOf(Object o): 返回此列表中第一次出现的指定元素的索引；如果此列表不包含该元素，则返回 -1。 int lastIndexOf(Object o): 返回此列表中最后出现的指定元素的索引；如果列表不包含此元素，则返回 -1。 Object remove(int index): 移除列表中指定位置的元素。 Object set(int index, Object element): 用指定元素替换列表中指定位置的元素。 List subList(int fromIndex, int toIndex): 返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的所有集合元素组成的子集。 Object[] toArray(): 返回按适当顺序包含列表中的所有元素的数组（从第一个元素到最后一个元素）。 void replaceAll(UnaryOperator operator): 根据operator指定的计算规则重新设置List集合的所有元素。 void sort(Comparator c): 根据Comparator参数对List集合的元素排序。 注：replaceAll和sort为Java8 新增方法： 4. Queue集合4.1. 简介Queue用户模拟队列这种数据结构，队列通常是指“先进先出”(FIFO，first-in-first-out)的容器。队列的头部是在队列中存放时间最长的元素，队列的尾部是保存在队列中存放时间最短的元素。新元素插入（offer）到队列的尾部，访问元素（poll）操作会返回队列头部的元素。通常，队列不允许随机访问队列中的元素。4.2. 接口中定义的方法 三、Map集合1. 简介Map用户保存具有映射关系的数据，因此Map集合里保存着两组数，一组值用户保存Map里的key,另一组值用户保存Map里的value，key和value都可以是任何引用类型的数据。Map的key不允许重复，即同一个Map对象的任何两个key通过equals方法比较总是返回false。 如下图所描述，key和value之间存在单向一对一关系，即通过指定的key,总能找到唯一的、确定的value。从Map中取出数据时，只要给出指定的key，就可以取出对应的value。 2. Map集合与Set集合、List集合的关系 与Set集合的关系 如果 把Map里的所有key放在一起看，它们就组成了一个Set集合（所有的key没有顺序，key与key之间不能重复），实际上Map确实包含了一个keySet()方法，用户返回Map里所有key组成的Set集合。 与List集合的关系 如果把Map里的所有value放在一起来看，它们又非常类似于一个List：元素与元素之间可以重复，每个元素可以根据索引来查找，只是Map中索引不再使用整数值，而是以另外一个对象作为索引。 3. 接口中定义的方法 Map中还包括一个内部类Entry，该类封装了一个key-value对。Entry包含如下三个方法：]]></content>
      <tags>
        <tag>java</tag>
        <tag>基础</tag>
        <tag>集合</tag>
        <tag>开发</tag>
      </tags>
  </entry>
</search>
